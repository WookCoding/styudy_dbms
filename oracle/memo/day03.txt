TCL(Transation Control Language) : 트랜젝션 제어어
	
트랜젝션
	하나의 서비스를 구현하기 위한 DML의 묶음

COMMIT 
	모든 작업을 확정하는 명령어

ROLLBACK
	이전 커밋한 지점으로 이동

**
TRUNCATE는 테이블 내용을 전체 삭제하므로, DELETE보다 빠르게 처리할 수 있다.
대용량 데이터 처리에 유리하지만 복구가 불가능하기 때문에 복구가 가능한 DELETE를
사용하는 것이 안전하다.
================================================================
NULL
	정의되지 않은 값.
	PK는 불가능, FK는 가능, UK 가능

조건식
	컬럼명 IS NULL : 컬럼값이 NULL이면 참
	컬러명 IS NOT NULL : 컬럼값이 NULL이 아니면 참

NULL 값을 다른 값으로 변경
	NVL(컬럼명, '값') : NULL 값 대신 다른 값으로 변경 후 조회
	NVL2(컬럼명, 'NULL이 아닐 때 값', 'NULL일 때 값'): NULL일 때의 값, NULL이 아닐 때의 값을 각각 설정
	
/*AS(ALIAS) : 별칭*/
/*SELECT절에서는 컬럼명 뒤에 띄어쓰고 작성하거나, AS 뒤에 작성한다.*/

CONCATENATION : 연결, || 
	
/*LIKE : 포함된 문자열 값을 찾고, 문자의 개수도 제한을 줄 수 있다.*/
/*
 * [컬럼명] LIKE '';
 * 
 * % : 모든 것
 * _ : 글자 수
 * 
 *  예) 
 * '%A' : A로 끝나는 모든 값
 * 'A%' : A로 시작하는 모든 값
 * '%A%': A가 포함된 모든 값
 * 'A__': A로 시작하고 3글자인 값
 * '_A' : A로 끝나고 2글자인 값
 * 		
 * */


/*집계 함수: 결과는 무조건 1개*/
/*
 * ※ NULL은 포함시키지 않는다.
 * ※ WHERE절에서 사용 불가.
 * 
 * 평균 	: AVG()
 * 최대값	: MAX()
 * 최소값	: MIN()
 * 총 합	: SUM()
 * 개수	: COUNT()
 * 
 * */

/*정렬*/
/*
 * ORDER BY 컬럼명, .... ASC : 오름차순
 * ORDER BY 컬럼명, ... DESC : 내림차순
 * 
 * */

/*
 *  GROUP BY : ~별 (예: 포지션 별 평균 키)
 * 
 *  GROUP BY 컬럼명 HAVING 조건식
 *  ※ WHERE절에 우선적으로 처리할 조건식을 작성해야 속도가 빠르다.
 *  ※ HAVING절에서는 집계함수 사용 가능
 *  
 * */

/*
 *  SUB QUERY
 * 
 *  FROM절 : IN LINE VIEW
 *  SELECT절 : SCALAR SUB QUERY
 *  WHERE절 : SUB QUERY
 * 
 * */

=================================================================
정규화
	삽입/수정/삭제의 이상현상을 제거하기 위한 작업
	데이터의 중복을 최소화 하는 데에 목적이 있다.
	5차 정규화까지 있으나 3차 정규화까지만 진행한다.

1차 정규화
	같은 성격과 내용의 컬럼이 연속적으로 나타날 경우

	상품명
	바지1, 바지2, 바지3

	상품명1	상품명2	상품명3
	바지1	바지2	바지3
	
	* 조회가 너무 힘들다.

	1차 정규화 진행
	
	상품명
	바지1
	바지2
	바지3

2차 정규화
	조합키(복합키)로 구성되었을 경우 조합키의 일부분에만 종속되는 속성이 있을 경우

	FLOWER
	이름	색상	꽃말	과
	해바라기	노란색	행운	국화
	장미	빨간색	사랑	장미

	* 이름에만 과가 종속됨

	2차 정규화 진행

	FLOWER_LANGUAGE
	이름	색상	꽃말	
	해바라기	노란색	행운	
	장미	빨간색	사랑	

	FLOWER
	이름 	과
	해바라기	국화
	장미	장미

3차 정규화
	












